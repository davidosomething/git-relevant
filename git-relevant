#!/usr/bin/env bash
#
# git-relevant
#
# Output list of file paths relevant to what you're working on. I.e., files
# that:
# - are in the project but not tracked (new)
# - have been modified (staged or not)
# - are not merged into a given branch (master by default)
#
# My typical usage is as a recently used files list for Vim/fzf
#
# Copyright (c) 2016 David O'Trakoun <me@davidosomething.com>
# MIT License
#

set -e

__git_relevant() {
  local dirty
  local staged
  local unmerged

  local comparison_branch='master'

  local output

  while [[ "$#" -gt 0 ]] && [[ ."$1" = .--* ]]; do
    case "$1" in
      "--branch")
        shift
        comparison_branch="$1"
        ;;
    esac
    shift
  done

  # Committed but different from what's in $comparison_branch
  # Does not get untracked
  unmerged=$(git diff --name-only "$comparison_branch" 2>/dev/null)

  # Modified (may have duplicates of the above)
  # and untracked files
  dirty=$( \
    git ls-files --full-name --modified --others --exclude-standard \
    2>/dev/null )

  # Staged files (even if file contents haven't changed)
  staged=$(git diff --name-only --cached 2>/dev/null)

  # List all, unique, drop blank lines
  # Store for further processing (TODO)
  output=$(printf "%s\n%s\n%s" "$dirty" "$staged" "$unmerged" \
    | sort --unique \
    | sed '/^$/d')

  echo "$output"
}

__git_relevant "$@"
